#!/usr/bin/env python3

"""
My autostart script for i3wm.
"""

import subprocess
import requests
from pathlib import Path
import shutil

GEOLOC_FP = Path("~/.geoloc").expanduser()


def get_location() -> str:
    """Fetch location information from a free API."""
    try:
        response = requests.get("https://ipinfo.io/json", timeout=5)
        response.raise_for_status()
        data = response.json()
        loc = data.get("loc", "")
        return ":".join(loc.split(",")) if loc else ""
    except requests.RequestException as e:
        print(f"Error fetching location: {e}")
        return ""


def get_or_update_location() -> str:
    """Retrieve or fetch location data and store it."""
    if GEOLOC_FP.exists():
        return GEOLOC_FP.read_text().strip()

    loc = get_location()
    if loc:
        GEOLOC_FP.write_text(loc)
    return loc


def command_exists(command: str) -> bool:
    """Check if a command exists in the system."""
    return shutil.which(command) is not None


def run_command(command: list[str]):
    """Run a command in the background."""
    try:
        subprocess.Popen(command)
    except Exception as e:
        print(f"Failed to execute {command[0]}: {e}")


def main():
    """Launch autostart applications."""
    # Set wallpaper using feh
    wallpaper_script = Path.home() / ".fehbg"
    if command_exists("feh") and wallpaper_script.exists():
        run_command([str(wallpaper_script)])

    # Start network manager applet
    if command_exists("nm-applet"):
        run_command(["nm-applet"])

    # Start compositor
    if command_exists("picom"):
        run_command(["picom"])

    # Start email client
    if command_exists("claws-mail"):
        run_command(["claws-mail", "--receive-all"])

    # Start redshift with location-based settings
    location = get_or_update_location()
    if location and command_exists("redshift"):
        run_command(["redshift", "-l", location, "-t", "6500:3400"])
    else:
        print("Redshift skipped: No valid location found or command not available.")


if __name__ == "__main__":
    main()
